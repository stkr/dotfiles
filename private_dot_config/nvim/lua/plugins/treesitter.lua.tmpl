return
{
    'nvim-treesitter/nvim-treesitter',
    config = function()
        require("nvim-treesitter.install").prefer_git = true
{{- if .offline }}
        local vendor_path = os.getenv('HOME') .. '/.tmp/treesitter-source/'
        local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
        parser_config["bash"].install_info.url = vendor_path .. "tree-sitter-bash"
        parser_config["c"].install_info.url = vendor_path .. "tree-sitter-c"
        parser_config["c_sharp"].install_info.url = vendor_path .. "tree-sitter-c-sharp"
        parser_config["cmake"].install_info.url = vendor_path .. "tree-sitter-cmake"
        parser_config["cpp"].install_info.url = vendor_path .. "tree-sitter-cpp"
        parser_config["css"].install_info.url = vendor_path .. "tree-sitter-css"
        parser_config["csv"].install_info.url = vendor_path .. "tree-sitter-csv"
        parser_config["devicetree"].install_info.url = vendor_path .. "tree-sitter-devicetree"
        parser_config["dockerfile"].install_info.url = vendor_path .. "tree-sitter-dockerfile"
        parser_config["dot"].install_info.url = vendor_path .. "tree-sitter-dot"
        parser_config["doxygen"].install_info.url = vendor_path .. "tree-sitter-doxygen"
        parser_config["dtd"].install_info.url = vendor_path .. "tree-sitter-xml"
        -- parser_config["editorconfig"].install_info.url = vendor_path .. "tree-sitter-editorconfig"
        parser_config["fish"].install_info.url = vendor_path .. "tree-sitter-fish"
        -- parser_config["fsharp"].install_info.url = vendor_path .. "tree-sitter-fsharp"
        parser_config["gdscript"].install_info.url = vendor_path .. "tree-sitter-gdscript"
        parser_config["git_config"].install_info.url = vendor_path .. "tree-sitter-git-config"
        parser_config["git_rebase"].install_info.url = vendor_path .. "tree-sitter-git-rebase"
        parser_config["gitattributes"].install_info.url = vendor_path .. "tree-sitter-gitattributes"
        parser_config["gitcommit"].install_info.url = vendor_path .. "tree-sitter-gitcommit"
        parser_config["gitignore"].install_info.url = vendor_path .. "tree-sitter-gitignore"
        -- parser_config["gnuplot"].install_info.url = vendor_path .. "tree-sitter-gnuplot"
        parser_config["godot_resource"].install_info.url = vendor_path .. "tree-sitter-godot-resource"
        parser_config["gpg"].install_info.url = vendor_path .. "tree-sitter-gpg-config"
        parser_config["html"].install_info.url = vendor_path .. "tree-sitter-html"
        parser_config["http"].install_info.url = vendor_path .. "tree-sitter-http"
        parser_config["java"].install_info.url = vendor_path .. "tree-sitter-java"
        parser_config["javascript"].install_info.url = vendor_path .. "tree-sitter-javascript"
        -- parser_config["jinja"].install_info.url = vendor_path .. "tree-sitter-jinja"
        parser_config["json5"].install_info.url = vendor_path .. "tree-sitter-json5"
        parser_config["kconfig"].install_info.url = vendor_path .. "tree-sitter-kconfig"
        parser_config["kotlin"].install_info.url = vendor_path .. "tree-sitter-kotlin"
        parser_config["lua"].install_info.url = vendor_path .. "tree-sitter-lua"
        parser_config["luap"].install_info.url = vendor_path .. "tree-sitter-luap"
        parser_config["make"].install_info.url = vendor_path .. "tree-sitter-make"
        parser_config["markdown"].install_info.url = vendor_path .. "tree-sitter-markdown"
        parser_config["markdown_inline"].install_info.url = vendor_path .. "tree-sitter-markdown"
        parser_config["matlab"].install_info.url = vendor_path .. "tree-sitter-matlab"
        parser_config["ninja"].install_info.url = vendor_path .. "tree-sitter-ninja"
        parser_config["objdump"].install_info.url = vendor_path .. "tree-sitter-objdump"
        parser_config["pem"].install_info.url = vendor_path .. "tree-sitter-pem"
        parser_config["perl"].install_info.url = vendor_path .. "tree-sitter-perl"
        parser_config["proto"].install_info.url = vendor_path .. "tree-sitter-proto"
        parser_config["python"].install_info.url = vendor_path .. "tree-sitter-python"
        -- parser_config["readline"].install_info.url = vendor_path .. "tree-sitter-readline"
        parser_config["regex"].install_info.url = vendor_path .. "tree-sitter-regex"
        -- parser_config["pip requirements"].install_info.url = vendor_path .. "tree-sitter-requirements"
        parser_config["rst"].install_info.url = vendor_path .. "tree-sitter-rst"
        parser_config["ruby"].install_info.url = vendor_path .. "tree-sitter-ruby"
        parser_config["rust"].install_info.url = vendor_path .. "tree-sitter-rust"
        parser_config["sql"].install_info.url = vendor_path .. "tree-sitter-sql"
        parser_config["ssh_config"].install_info.url = vendor_path .. "tree-sitter-ssh-config"
        -- parser_config["tcl"].install_info.url = vendor_path .. "tree-sitter-tcl"
        -- parser_config["tmux"].install_info.url = vendor_path .. "tree-sitter-tmux"
        parser_config["toml"].install_info.url = vendor_path .. "tree-sitter-toml"
        parser_config["unison"].install_info.url = vendor_path .. "tree-sitter-unison"
        parser_config["verilog"].install_info.url = vendor_path .. "tree-sitter-verilog"
        -- parser_config["vhdl"].install_info.url = vendor_path .. "tree-sitter-vhdl"
        parser_config["vim"].install_info.url = vendor_path .. "tree-sitter-vim"
        parser_config["vimdoc"].install_info.url = vendor_path .. "tree-sitter-vimdoc"
        parser_config["xml"].install_info.url = vendor_path .. "tree-sitter-xml"
        parser_config["yaml"].install_info.url = vendor_path .. "tree-sitter-yaml"
{{- end }}

        require('nvim-treesitter.configs').setup {
            ensure_installed = { "bash", "c", "c_sharp", "cmake", "cpp", "css", "csv", "devicetree",
                "dockerfile", "dot", "doxygen", "dtd", "fish", "gdscript", "git_config", "git_rebase",
                "gitattributes", "gitcommit", "gitignore", "godot_resource", "gpg", "html", "http",
                "java", "javascript", "json5", "kconfig", "kotlin", "lua", "luap", "make", "markdown",
                "markdown_inline", "matlab", "ninja", "objdump", "pem", "perl", "proto", "python",
                "regex", "rst", "ruby", "rust", "sql", "ssh_config", "toml", "verilog",
                "vim", "vimdoc", "xml", "yaml", },
            auto_install = false,
            highlight = {
                enable = true,
                disable = function(lang, buf)
                    local max_filesize = 500 * 1024
                    local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
                    if ok and stats and stats.size > max_filesize then
                        return true
                    end
                end,
            },
            incremental_selection = {
                enable = true,
                keymaps = {
                    init_selection = nil,
                    node_incremental = nil,
                    scope_incremental = 'ga',
                    node_decremental = nil,
                },
            },
            indent = {
                enable = true,
                disable = {
                    -- https://www.reddit.com/r/neovim/comments/1agynre/how_to_make_markdown_list_items_indent_behind_the/
                    "markdown",     -- indentation at bullet points is worse than native neovim indentation
                },
            },
        }
    end,
    build = ":TSUpdate",
    dependencies = {
        'nvim-treesitter/nvim-treesitter-textobjects',
    },
}
